Data = readWorkbook(file_path, sheet = 1, startRow = 1, colNames = TRUE,
rowNames = FALSE, detectDates = FALSE, skipEmptyRows = TRUE,
skipEmptyCols = TRUE, check.names = FALSE,
namedRegion = NULL, na.strings = "", fillMergedCells = FALSE)
# Individuals 18+
Employment <- Data %>% filter(age >= 18)
# a. Work for someone else for pay (as employee, labourer, apprentice)
Employment_workForSomeone <- Employment %>%
filter(work_as_s == "a. Work for someone else for pay (as employee, labourer, apprentice)")
# b. Work in own/family farming or fishing, only for sale, mainly for sale
Employment_workInOwn <- Employment %>%
filter(work_as_s == "b. Work in own/family farming or fishing" & farm_an_products_s %in% c("a. Only for sale", "b. Mainly for sale"))
# a. Do any other activity to generate an income, even for 1 hour?
Employment_1hour <- Employment %>%
filter(grepl("a. Do any other activity to generate an income, even for 1 hour?", ind_activity_s) |
ind_activity_s == "b. Have a paid job or business activity, but was temporary absent" |
ind_activity_s == "c. Help without pay in a family business")
Sum_of_individual_employment <- nrow(Employment_workForSomeone) + nrow(Employment_workInOwn) + nrow(Employment_1hour)
Percentage_of_employment = (nrow(Employment_workForSomeone) + nrow(Employment_workInOwn) + nrow(Employment_1hour)) / nrow(Employment)
# Working-age individuals (18+ years old) who were not employed during the past week (as per the definition above),
Working_age_indv <- Data %>% filter(age >= 18) %>%
anti_join(Employment_workForSomeone) %>%
anti_join(Employment_workInOwn) %>%
anti_join(Employment_1hour)
# Unemployment
Unemployment <- Data %>% filter(age >= 18) %>%
anti_join(Employment_workForSomeone) %>%
anti_join(Employment_workInOwn) %>%
anti_join(Employment_1hour) %>%
filter(paid_job_yn =="a. Yes" | job_opp_avail_yn == "a. Yes") # should be and and
Sum_of_individual_unemployment <- nrow(Unemployment)
Sum_of_individual_unemployment
Percentage_of_unemployment <- nrow(Unemployment) / nrow(Working_age_indv)
Percentage_of_unemployment
nrow(Unemployment)
nrow(Working_age_indv)
nrow(Working_age_indv)
Percentage_of_unemployment <- nrow(Unemployment) / nrow(Working_age_indv)
Labor_force <- Sum_of_individual_employment + Sum_of_individual_unemployment
# Create a data frame to write results
Parameter <- c("Total individuals assessed", "Employment (indv)", "Employment (%)", "Unemployment (invd)", "Unemployment (%)", "Labor Force (indv)")
Value <- c(nrow(Data), Sum_of_individual_employment, Percentage_of_employment, Sum_of_individual_unemployment, Percentage_of_unemployment, Labor_force)
DF <- data.frame(Parameter, Value)
View(DF)
library(survey)
library(dplyr)
survD <- varon
SurvEMPLOY<-survD %>%
mutate(EmployCnt = ifelse(work_as_s %ni% c("d. None of the above", "") |
farm_an_products_s == "a. Only for sale" | #mainlyforsale was not selected in survey by any respondents
ind_activity_s %ni% c("d. Did not do any income generating activity, not even for one hour",
""), 1,0 ))%>%
mutate(EmployCntW=EmployCnt*WT)%>%
filter(age >= 18)%>%
group_by(Nationality) %>%
summarize(cnt= sum(EmployCntW))
'%ni%' <- Negate("%in%")
survD <- varon
SurvEMPLOY<-survD %>%
mutate(EmployCnt = ifelse(work_as_s %ni% c("d. None of the above", "") |
farm_an_products_s == "a. Only for sale" | #mainlyforsale was not selected in survey by any respondents
ind_activity_s %ni% c("d. Did not do any income generating activity, not even for one hour",
""), 1,0 ))%>%
mutate(EmployCntW=EmployCnt*WT)%>%
filter(age >= 18)%>%
group_by(Nationality) %>%
summarize(cnt= sum(EmployCntW))
survD$WT <- survD$weight
SurvEMPLOY<-survD %>%
mutate(EmployCnt = ifelse(work_as_s %ni% c("d. None of the above", "") |
farm_an_products_s == "a. Only for sale" | #mainlyforsale was not selected in survey by any respondents
ind_activity_s %ni% c("d. Did not do any income generating activity, not even for one hour",
""), 1,0 ))%>%
mutate(EmployCntW=EmployCnt*WT)%>%
filter(age >= 18)%>%
group_by(Nationality) %>%
summarize(cnt= sum(EmployCntW))
SurvEMPLOY<-survD %>%
mutate(EmployCnt = ifelse(work_as_s %ni% c("d. None of the above", "") |
farm_an_products_s == "a. Only for sale" | #mainlyforsale was not selected in survey by any respondents
ind_activity_s %ni% c("d. Did not do any income generating activity, not even for one hour",
""), 1,0 ))%>%
mutate(EmployCntW=EmployCnt*WT)%>%
filter(age >= 18)%>%
group_by(Nationality) %>%
summarize(cnt= sum(EmployCntW))
View(SurvEMPLOY)
SurvUNEMPLOY<-survD %>%
mutate(UnemployCnt = ifelse(work_as_s %ni% c("d. None of the above", "") |
farm_an_products_s == "a. Only for sale" |
ind_activity_s %ni% c("d. Did not do any income generating activity, not even for one hour",
"")&
paid_job_yn == "b. No"&
job_opp_avail_yn == "b. No", 0,1 ))%>%
mutate(UnemployCntW=UnemployCnt*WT)%>%
filter(age >= 18)%>%
group_by(Nationality) %>%
summarize(cnt= sum(UnemployCntW))
survD$WT
#install.packages("survey")
library(survey)
SurvEMPLOY<-survD %>%
mutate(EmployCnt = ifelse(work_as_s %ni% c("d. None of the above", "") |
farm_an_products_s == "a. Only for sale" | #mainlyforsale was not selected in survey by any respondents
ind_activity_s %ni% c("d. Did not do any income generating activity, not even for one hour",
""), 1,0 ))%>%
mutate(EmployCntW=EmployCnt*WT)%>%
filter(age >= 18)%>%
group_by(Nationality) %>%
summarize(cnt= sum(EmployCntW))
SurvEMPLOY
SurvEMPLOY<-survD %>%
mutate(EmployCnt = ifelse(work_as_s %ni% c("d. None of the above", "") |
farm_an_products_s == "a. Only for sale" | #mainlyforsale was not selected in survey by any respondents
ind_activity_s %ni% c("d. Did not do any income generating activity, not even for one hour",
""), 1,0 ))
SurvEMPLOY<-survD %>%
mutate(EmployCnt = ifelse(work_as_s %ni% c("d. None of the above", "") |
farm_an_products_s == "a. Only for sale" | #mainlyforsale was not selected in survey by any respondents
ind_activity_s %ni% c("d. Did not do any income generating activity, not even for one hour",
""), 1,0 )) %>% filter(age >= 18)%>%
%>%
%>%
mutate(EmployCntW=EmployCnt*WT)%>%
filter(age >= 18)%>%
group_by(Nationality) %>%
summarize(cnt= sum(EmployCntW))
SurvEMPLOY<-survD %>%
mutate(EmployCnt = ifelse(work_as_s %ni% c("d. None of the above", "") |
farm_an_products_s == "a. Only for sale" | #mainlyforsale was not selected in survey by any respondents
ind_activity_s %ni% c("d. Did not do any income generating activity, not even for one hour",
""), 1,0 )) %>% filter(age >= 18)
table(SurvEMPLOY$EmployCnt)
table(SurvEMPLOY$EmployCnt, useNA = "a")
table(varon$farm_an_products_s, useNA = "a")
SurvEMPLOY<-survD %>%
mutate(EmployCnt = ifelse(work_as_s %ni% c("d. None of the above", "") |
farm_an_products_s == "a. Only for sale" | #mainlyforsale was not selected in survey by any respondents
ind_activity_s %ni% c("d. Did not do any income generating activity, not even for one hour",
""), 1,0 )) %>% filter(age >= 18) %>%
mutate(EmployCntW=EmployCnt*WT)
SurvEMPLOY<-survD %>%
mutate(EmployCnt = ifelse(work_as_s %ni% c("d. None of the above", "") |
farm_an_products_s == "a. Only for sale" | #mainlyforsale was not selected in survey by any respondents
ind_activity_s %ni% c("d. Did not do any income generating activity, not even for one hour",
""), 1,0 )) %>% filter(age >= 18) %>%
mutate(EmployCntW=EmployCnt*WT)%>%
group_by(Nationality) %>%
summarize(cnt= sum(EmployCntW))
SurvEMPLOY
SurvEMPLOY<-survD %>%
mutate(EmployCnt = ifelse(work_as_s %ni% c("d. None of the above", "") |
farm_an_products_s == "a. Only for sale" | #mainlyforsale was not selected in survey by any respondents
ind_activity_s %ni% c("d. Did not do any income generating activity, not even for one hour",
""), 1,0 )) %>% filter(age >= 18) %>%
mutate(EmployCntW=EmployCnt*WT)%>%
group_by(Nationality)
SurvEMPLOY
SurvEMPLOY<-survD %>%
mutate(EmployCnt = ifelse(work_as_s %ni% c("d. None of the above", "") |
farm_an_products_s == "a. Only for sale" | #mainlyforsale was not selected in survey by any respondents
ind_activity_s %ni% c("d. Did not do any income generating activity, not even for one hour",
""), 1,0 )) %>% filter(age >= 18) %>%
mutate(EmployCntW=EmployCnt*WT)%>%
group_by(Nationality) %>%
summarize(cnt= sum(EmployCntW, na.rm = T))
SurvEMPLOY
SurvEMPLOY<-survD %>%
mutate(EmployCnt = ifelse(work_as_s %ni% c("d. None of the above", "") |
farm_an_products_s == "a. Only for sale" | #mainlyforsale was not selected in survey by any respondents
ind_activity_s %ni% c("d. Did not do any income generating activity, not even for one hour",
""), 1,0 )) %>% filter(age >= 18) %>%
mutate(EmployCntW=EmployCnt)%>% #  *WT)%>%
group_by(Nationality) %>%
summarize(cnt= sum(EmployCntW, na.rm = T))
SurvEMPLOY
SurvEMPLOY<-survD %>%
mutate(EmployCnt = ifelse(work_as_s %ni% c("d. None of the above", "") |
farm_an_products_s == "a. Only for sale" | #mainlyforsale was not selected in survey by any respondents
ind_activity_s %ni% c("d. Did not do any income generating activity, not even for one hour",
""), 1,0 )) %>% filter(age >= 18) %>%
mutate(EmployCntW=EmployCnt)%>% #  *WT)%>%
group_by(Nationality) %>%
summarize(cnt= sum(EmployCntW, na.rm = F))
SurvEMPLOY
SurvEMPLOY<-survD %>%
mutate(EmployCnt = ifelse(work_as_s %ni% c("d. None of the above", "") |
farm_an_products_s == "a. Only for sale" | #mainlyforsale was not selected in survey by any respondents
ind_activity_s %ni% c("d. Did not do any income generating activity, not even for one hour",
""), 1,0 )) %>% filter(age >= 18) %>%
mutate(EmployCntW=EmployCnt)%>% #  *WT)%>%
group_by(Nationality) %>%
summarize(cnt= sum(EmployCntW, na.rm = T))
SurvEMPLOY
SurvUNEMPLOY<-survD %>%
mutate(UnemployCnt = ifelse(work_as_s %ni% c("d. None of the above", "") |
farm_an_products_s == "a. Only for sale" |
ind_activity_s %ni% c("d. Did not do any income generating activity, not even for one hour",
"")&
paid_job_yn == "b. No"&
job_opp_avail_yn == "b. No", 0,1 ))%>%
mutate(UnemployCntW=UnemployCnt*WT)%>%
filter(age >= 18)%>%
group_by(Nationality) %>%
summarize(cnt= sum(UnemployCntW))
SurvUNEMPLOY
SurvUNEMPLOY<-survD %>%
mutate(UnemployCnt = ifelse(work_as_s %ni% c("d. None of the above", "") |
farm_an_products_s == "a. Only for sale" |
ind_activity_s %ni% c("d. Did not do any income generating activity, not even for one hour",
"")&
paid_job_yn == "b. No"&
job_opp_avail_yn == "b. No", 0,1 ))%>%
mutate(UnemployCntW=UnemployCnt*WT)%>%
filter(age >= 18)%>%
group_by(Nationality) %>%
summarize(cnt= sum(UnemployCntW, na.rm = T))
SurvUNEMPLOY
SurvUNEMPLOY<-survD %>%
mutate(UnemployCnt = ifelse(work_as_s %ni% c("d. None of the above", "") |
farm_an_products_s == "a. Only for sale" |
ind_activity_s %ni% c("d. Did not do any income generating activity, not even for one hour",
"")&
paid_job_yn == "b. No"&
job_opp_avail_yn == "b. No", 0,1 ))%>%filter(age >= 18)
table(SurvUNEMPLOY$UnemployCnt, useNA = "a")
SurvUNEMPLOY<-survD %>%
mutate(UnemployCnt = ifelse(work_as_s %ni% c("d. None of the above", "") |
farm_an_products_s == "a. Only for sale" |
ind_activity_s %ni% c("d. Did not do any income generating activity, not even for one hour",
"")&
paid_job_yn == "b. No"&
job_opp_avail_yn == "b. No", 0,1 ))%>%filter(age >= 18)
table(SurvUNEMPLOY$UnemployCnt, useNA = "a")
SurvUNEMPLOY<-survD %>%
mutate(UnemployCnt = ifelse((work_as_s %ni% c("d. None of the above", "") |
farm_an_products_s == "a. Only for sale" |
ind_activity_s %ni% c("d. Did not do any income generating activity, not even for one hour",
"") )&
paid_job_yn == "b. No"&
job_opp_avail_yn == "b. No", 0,1 )) %>%filter(age >= 18)
table(SurvUNEMPLOY$UnemployCnt, useNA = "a")
SurvUNEMPLOY<-survD %>%
mutate(UnemployCnt = ifelse((work_as_s %ni% c("d. None of the above", "") |
farm_an_products_s == "a. Only for sale" |
ind_activity_s %ni% c("d. Did not do any income generating activity, not even for one hour",
"") )& (
paid_job_yn == "b. No"&
job_opp_avail_yn == "b. No" ) , 0,1 )) %>%filter(age >= 18)
table(SurvUNEMPLOY$UnemployCnt, useNA = "a")
SurvUNEMPLOY<-survD %>%
mutate(UnemployCnt = ifelse( !(work_as_s %ni% c("d. None of the above", "") |
farm_an_products_s == "a. Only for sale" |
ind_activity_s %ni% c("d. Did not do any income generating activity, not even for one hour",
"") )& (
paid_job_yn == "a. Yes"&
job_opp_avail_yn == "a. Yes" ) , 0,1 )) %>%filter(age >= 18)
table(SurvUNEMPLOY$UnemployCnt, useNA = "a")
SurvUNEMPLOY<-survD %>%
mutate(UnemployCnt = ifelse(work_as_s %ni% c("d. None of the above", "") |
farm_an_products_s == "a. Only for sale" |
ind_activity_s %ni% c("d. Did not do any income generating activity, not even for one hour",
"")&
paid_job_yn == "b. No"&
job_opp_avail_yn == "b. No", 0,1 ))%>%
mutate(UnemployCntW=UnemployCnt*)%>%
filter(age >= 18)
SurvUNEMPLOY<-survD %>%
mutate(UnemployCnt = ifelse(work_as_s %ni% c("d. None of the above", "") |
farm_an_products_s == "a. Only for sale" |
ind_activity_s %ni% c("d. Did not do any income generating activity, not even for one hour",
"")&
paid_job_yn == "b. No"&
job_opp_avail_yn == "b. No", 0,1 ))%>%
mutate(UnemployCntW=UnemployCnt*)%>%filter(age >= 18)
SurvUNEMPLOY<-survD %>%
mutate(UnemployCnt = ifelse(work_as_s %ni% c("d. None of the above", "") |
farm_an_products_s == "a. Only for sale" |
ind_activity_s %ni% c("d. Did not do any income generating activity, not even for one hour",
"")&
paid_job_yn == "b. No"&
job_opp_avail_yn == "b. No", 0,1 ))%>%
mutate(UnemployCntW=UnemployCnt)%>%filter(age >= 18)
table(SurvUNEMPLOY$UnemployCnt, useNA = "a")
SurvWRKINGAGE<-survD %>%
mutate(Labor = ifelse(age >= 18,1,0 ))%>%
mutate(LaborW=Labor*WT)%>%
filter(age >= 18)%>%
group_by(Nationality) %>%
summarize(cnt= sum(LaborW))
SurvWRKINGAGE
library(readxl)
library(dplyr)
subset <- varon #read_excel("My Documents/Employment/02. Applications/211229 UNHCR Associate Information Management Officer/Test/Original/VARON 2021 04102021-final dataset.xlsx")
total_employ <- sum(subset$age >= 18 & subset$work_as_s != 'd. None of the above', na.rm = TRUE) + sum(subset$age >= 18 & subset$ind_activity_s != 'd. Did not do any income generating activity, not even for one hour', na.rm = TRUE)
total_employ
total_unemploy <- sum(subset$age >= 18 & subset$paid_job_yn == 'a. Yes' & subset$job_opp_avail_yn == 'a. Yes', na.rm = TRUE)
total_unemploy
total <- total_employ + total_unemploy
total
total_employ_irq <- sum(subset$Nationality =='IRQ' & subset$age >= 18 & subset$work_as_s != 'd. None of the above', na.rm = TRUE) + sum(subset$Nationality =='IRQ' & subset$age >= 18 & subset$ind_activity_s != 'd. Did not do any income generating activity, not even for one hour', na.rm = TRUE)
total_unemploy_irq <- sum(subset$Nationality =='IRQ' & subset$age >= 18 & subset$paid_job_yn == 'a. Yes' & subset$job_opp_avail_yn == 'a. Yes', na.rm = TRUE)
total_irq <- total_employ_irq + total_unemploy_irq
total_pc_employ_irq <- total_employ_irq / total_irq *100
total_pc_unemploy_irq <- total_unemploy_irq / total_irq *100
total_employ_nonirq <- sum(subset$Nationality =='NonIRQ' & subset$age >= 18 & subset$work_as_s != 'd. None of the above', na.rm = TRUE) + sum(subset$Nationality =='NonIRQ' & subset$age >= 18 & subset$ind_activity_s != 'd. Did not do any income generating activity, not even for one hour', na.rm = TRUE)
total_unemploy_nonirq <-sum(subset$Nationality =='NonIRQ' & subset$age >= 18 & subset$paid_job_yn == 'a. Yes' & subset$job_opp_avail_yn == 'a. Yes', na.rm = TRUE)
total_nonirq <- total_employ_nonirq + total_unemploy_nonirq
total_pc_employ_nonirq <- total_employ_nonirq / total_nonirq *100
total_pc_unemploy_nonirq <- total_unemploy_nonirq / total_nonirq *100
total_irq
total_nonirq
#######
?read_spss
# load the package like it was loaded with library()
devtools::load_all()
a_response <- mdl_vars_create_from_dta(
survey_idno = "UNHCR_CRI_2021_SEIC_v2.1",
file_path = paste(getwd(), "UNHCR_CRI_2021_SEIC_data_round1_v2.1.dta", sep="/"),
file_id = "hh_r_12",
file_name = "Round 11",
file_description = "This file contains the household data collected during the survey (round 1)."
)
a_response <- mdl_vars_create_from_dta(
survey_idno = "UNHCR_CRI_2021_SEIC_v2.1",
file_path = "C:/Users/SANSON/one_drive2/OneDrive - UNHCR/_DATASETS/AMERICAS/economists/UNHCR_CRI_2021_SEIC/2_anonymized/UNHCR_CRI_2021_SEIC_data_round1_v2.1.dta",
file_id = "hh_r_12",
file_name = "Round 11",
file_description = "This file contains the household data collected during the survey (round 1)."
)
# setup API key
mdl_api_set_key(api_key = Sys.getenv("API_KEY_MDL"))
# set the url to the user testing version of the MDL (https://microdata-uat.unhcr.org/)
mdl_api_set_url(enum_api_url = mdl_enum_api_url$production)
mdl_collection_get()
mdl_collection_list()
a_response <- mdl_vars_create_from_dta(
survey_idno = "UNHCR_CRI_2021_SEIC_v2.1",
file_path = "C:/Users/SANSON/one_drive2/OneDrive - UNHCR/_DATASETS/AMERICAS/economists/UNHCR_CRI_2021_SEIC/2_anonymized/UNHCR_CRI_2021_SEIC_data_round1_v2.1.dta",
file_id = "hh_r_12",
file_name = "Round 11",
file_description = "This file contains the household data collected during the survey (round 1)."
)
# load the package like it was loaded with library()
devtools::load_all()
a_response <- mdl_vars_create_from_dta(
survey_idno = "UNHCR_CRI_2021_SEIC_v2.1",
file_path = "C:/Users/SANSON/one_drive2/OneDrive - UNHCR/_DATASETS/AMERICAS/economists/UNHCR_CRI_2021_SEIC/2_anonymized/UNHCR_CRI_2021_SEIC_data_round1_v2.1.dta",
file_id = "hh_r_12",
file_name = "Round 11",
file_description = "This file contains the household data collected during the survey (round 1)."
)
# load the package like it was loaded with library()
devtools::load_all()
a_response <- mdl_vars_create_from_dta(
survey_idno = "UNHCR_CRI_2021_SEIC_v2.1",
file_path = "C:/Users/SANSON/one_drive2/OneDrive - UNHCR/_DATASETS/AMERICAS/economists/UNHCR_CRI_2021_SEIC/2_anonymized/UNHCR_CRI_2021_SEIC_data_round1_v2.1.dta",
file_id = "hh_r_12",
file_name = "Round 11",
file_description = "This file contains the household data collected during the survey (round 1)."
)
a_file <- haven::read_dta("C:/Users/SANSON/one_drive2/OneDrive - UNHCR/_DATASETS/AMERICAS/economists/UNHCR_CRI_2021_SEIC/2_anonymized/UNHCR_CRI_2021_SEIC_data_round1_v2.1.dta",)
a_file
summary(a_file$access_4_food1)
table(a_file$access_4_food1, useNA = "a")
(a_file$access_4_food1, useNA = "a")
(a_file$access_4_food1)
labelled::val_label(a_file$access_4_food1)
?labelled::val_label
labelled::val_labels(a_file$access_4_food1)
table(a_file$access_4_food1, useNA = "a")
table(as.factor(a_file$access_4_food1), useNA = "a")
table(labelled::unlabelled(a_file$access_4_food1), useNA = "a")
table(labelled::drop_unused_value_labels(a_file$access_4_food1), useNA = "a")
labelled::val_labels(a_file$access_4_food1)
table(as.integer(a_file$access_4_food1), useNA = "a")
a_var <- a_file$access_4_food1
cat_values <- as.character(labelled::val_labels(a_var))
cat_values
cat_table <- table(a_var)
cat_labels <- names(cat_table)
cat_labels
cat_values
cat_values
cat_labels
cat_table
cat_table <- table(as.factor(a_var))
cat_table
cat_table <- table(as.factor(a_var))
cat_table
cat_labels <- names(cat_table)
cat_labels
cat_table <- table(haven::as_factor(a_var))
cat_table
nlevels(haven::as_factor(a_var))
cat_table <- table(haven::as_factor(a_var))
cat_table
cat_labels <- names(cat_table)
cat_labels
# load the package like it was loaded with library()
devtools::load_all()
a_response <- mdl_vars_create_from_dta(
survey_idno = "UNHCR_CRI_2021_SEIC_v2.1",
file_path = "C:/Users/SANSON/one_drive2/OneDrive - UNHCR/_DATASETS/AMERICAS/economists/UNHCR_CRI_2021_SEIC/2_anonymized/UNHCR_CRI_2021_SEIC_data_round1_v2.1.dta",
file_id = "hh_r_12",
file_name = "Round 11",
file_description = "This file contains the household data collected during the survey (round 1)."
)
# load the package like it was loaded with library()
devtools::load_all()
a_response <- mdl_vars_create_from_dta(
survey_idno = "UNHCR_CRI_2021_SEIC_v2.1",
file_path = "C:/Users/SANSON/one_drive2/OneDrive - UNHCR/_DATASETS/AMERICAS/economists/UNHCR_CRI_2021_SEIC/2_anonymized/UNHCR_CRI_2021_SEIC_data_round1_v2.1.dta",
file_id = "hh_r_123",
file_name = "Round 11",
file_description = "This file contains the household data collected during the survey (round 1)."
)
a_response <- mdl_vars_create_from_dta(
survey_idno = "UNHCR_CRI_2021_SEIC_v2.1",
file_path = "C:/Users/SANSON/one_drive2/OneDrive - UNHCR/_DATASETS/AMERICAS/economists/UNHCR_CRI_2021_SEIC/2_anonymized/UNHCR_CRI_2021_SEIC_data_round1_v2.1.dta",
file_id = "hh_r1",
file_name = "Round 1",
file_description = "This file contains the household data collected during the survey (round 1)."
)
# creates all files for the package to work
devtools::document()
country_ISO_alpha3_codes = c("ITA", "DEU", "FRA")
# create countries
country_ISO_alpha3_codes <- toupper(country_ISO_alpha3_codes)
country_names <- sapply(country_ISO_alpha3_codes, function(x){return (mdl_enum_country[[x]])})
library(mdl)
country_names <- sapply(country_ISO_alpha3_codes, function(x){return (mdl_enum_country[[x]])})
country_names
# create citation
# countries
countries_string <- paste0(country_names[1], "")
countries_string
if(length(country_names) > 1){
countries_string <- paste0(paste0(country_names[1:length(country_names)-1], ", "), country_names[length(country_names)], "")
}
countries_string
paste0(country_names, "")
x <- cat(country_names)
x
x <- stringr::str_c(country_names, collapse = ", ")
x
country_ISO_alpha3_codes = c("ITA")  #c("ITA", "DEU", "FRA")
# create countries
country_ISO_alpha3_codes <- toupper(country_ISO_alpha3_codes)
country_names <- sapply(country_ISO_alpha3_codes, function(x){return (mdl_enum_country[[x]])})
x <- stringr::str_c(country_names, collapse = ", ")
x
country_ISO_alpha3_codes = c("ITA", "DEU", "FRA", "SYR")
# create countries
country_ISO_alpha3_codes <- toupper(country_ISO_alpha3_codes)
country_names <- sapply(country_ISO_alpha3_codes, function(x){return (mdl_enum_country[[x]])})
x <- stringr::str_c(country_names, collapse = ", ")
x
# set path to package
setwd("C:\\Users\\SANSON\\Documents\\GitHub\\mdl\\R")
# creates all files for the package to work
devtools::document()
# load the package like it was loaded with library()
devtools::load_all()
# setup API key
mdl_api_set_key(api_key = Sys.getenv("API_KEY_MDL"))
# set the url to the user testing version of the MDL (https://microdata-uat.unhcr.org/)
mdl_api_set_url(enum_api_url = mdl_enum_api_url$uat)
a_survey_id <- "test81122"
a_survey_metadata <-  mdl_survey_generate_metadata_list(
survey_idno = a_survey_id,
title = "Survey of intentions and perspectives of refugees from Ukraine #2 - Sept 2022",
country_ISO_alpha3_codes = c("BEL", "BGR", "DEU", "FRA", "ITA", "LTU", "MDA", "POL", "ROM", "SVK", "ESP", "TUR"), #Get an error when add additional countries: , "CZE", "DEU", "FRA", "ITA", "LTU", "MDA", "POL", "ROM", "SVK", "ESP", "TUR"
enum_survey_study_type = mdl_enum_survey_study_type$`Other Household Survey [hh/oth]`,
series_information = "",
abstract = "To ensure the centrality of refugees’ voices in discussions about their future, as well as to inform evidence-based inter-agency responses in support of host Governments, UNHCR is leading the regular implementation of intentions surveys with refugees from Ukraine, collecting primary data on their profiles, their current situation and intentions, and the factors influencing their decision-making.
The first regional intentions survey was completed and the report published in July 2022 (https://data.unhcr.org/en/documents/details/94176). This data was collected during the second round, conducted between August and September 2022. The scope was expanded to include not only countries neighbouring Ukraine but other host countries in Europe and beyond. In addition, the second round also includes a deeper analysis of the factors influencing refugees’ decisions, as well as key insights into their current socio-economic situation. The report was published in September 2022 (https://data.unhcr.org/en/documents/details/95767).
A mixed methodological approach was used, combining different sampling approaches and data collection modes. Over 4,800 refugee households (2,000 from countries neighboring Ukraine and 2,800 from other host countries) were interviewed either through a phone-based survey, web-based survey or face-to-face interview. All surveys used a harmonized questionnaire.
This data is an anonymous version of the original data collected and used for the primary analysis.",
enum_survey_kind_of_data = mdl_enum_survey_kind_of_data$`Sample survey data [ssd]`,
unit_of_analysis = "Households",
version_description = "v2.1: Edited, cleaned and anonymised data.",
version_date = "2022-10-31",
scope_description = "The scope includes: \n- profiles and socio-economic situation \n- intention to return",
enum_survey_topics = c(mdl_enum_survey_topics$Protection,
mdl_enum_survey_topics$Education,
mdl_enum_survey_topics$`Livelihood and Social cohesion`,
mdl_enum_survey_topics$Return,
mdl_enum_survey_topics$`Housing, Land and Property`),
keywords = c("intentions", "refugees", "Ukraine emergency", "Ukraine refugees"),
geographic_coverage = "Europe",
universe = "Refugees from Ukraine",
primary_investigators = c("UNHCR"),
other_producers = c(""),
sampling_description = "The overall combined sample included a total of over 4,800 surveys completed using one of the three methods. All surveys used a harmonized questionnaire, which collected data on refugees’ demographic profile, including about their place of origin, conditions in current host country and detailed intentions information. For the regional analysis, weights were applied based on the most recent figures available of the number of individual refugees recorded in each country. Most results are disaggregated between countries neighbouring Ukraine (2,000 surveys) and the rest of host countries covered in the survey (2,800 surveys), for the purpose of identifying differences in intentions and current conditions. A more detailed description of the sampling and weighting approach is included in Annex 1 of the report.",
weighting_description = "",
collection_date_start = "2022-08-01",
collection_date_end = "2022-09-30",
enum_survey_collection_mode = mdl_enum_survey_collection_mode$`Other [oth]`,
data_collection_notes = "Three different data collection modes were employed: phone-based surveys, web-based survesy and face-to-face interviews.",
data_collectors = c("UNHCR"),
questionnaire_description = "",
contacts_list = list(list(name = "UNHCR Global Data Service Statistics and Demographics Section", affiliation = "UNHCR", email = "microdata@unhcr.org")),
publication_year = 2022
)
a_response <- mdl_survey_create(
survey_metadata_list = a_survey_metadata,
enum_collection = mdl_enum_collection$MENA, #######!!!!!!!!!!
enum_survey_access_policy = mdl_enum_survey_access_policy$`Licensed use files`,
published = FALSE,
overwrite = T
)
