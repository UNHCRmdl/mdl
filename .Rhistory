for(a_nation in output$dataset$metadata$study_desc$study_info$nation$name){
if(! a_nation %in% mdl_enum_country){
message("Country not found in MDL list, please check and create an alias if necessary: ", a_nation," (", idno,")")
}
}
setwd(oldwd)
cat("\n\n")
}
zzzH2 <- mdl_harvest_worldbank(
wbg_survey_idno = "JOR_2015_SRHCS_v01_M",
base_path = NULL,
upload_files = T,
overwrite = T,
published = T
)
getwd()
setwd("C:/Users/SANSON/OneDrive - UNHCR/Desktop/nesstar")
#'
#' Copies a dataset from the WBG microdata library (https://microdata.worldbank.org) to the UNHCR MDL.
#'
#' @param wbg_survey_idno Unique identifier in the World Bank microdata library
#' @param base_path The path on your computer where the files will be downloaded
#' @param upload_files TRUE if you want to upload a copy of the documentation files; FALSE if you just want to put a direct link to the files
#' @param overwrite TRUE is you want to overwrite the dataset in case it already exists; FALSE if you want to avoid to overwrite
#' @param published TRUE if you want to publish directly the dataset; FALSE if you want just to load it in the back-end
#'
#' @export
mdl_harvest_worldbank <- function(
wbg_survey_idno,
base_path = NULL,
upload_files,
overwrite,
published
){
# files with these extensions will not be uploaded anyway
no_upload_extensions <- c("", "php")
# set base path
if(is.null(base_path)){
base_path <- getwd()
}
# start message
print(paste("Processing", wbg_survey_idno))
idno <- wbg_survey_idno
# Set folders
survey_path <- file.path(base_path, idno)
doc_path <- file.path(survey_path, "Doc")
# Create the folders if they do not exist
if (file.exists(survey_path)){
if (!file.exists(doc_path)){
dir.create(doc_path)
}
} else {
dir.create(survey_path)
dir.create(doc_path)
}
##    # set working directory
##    oldwd <- getwd()
##    setwd(survey_path)
# Download the metadata files (ddi and rdf files + json version of rdf)
url1 <- paste0("https://microdata.worldbank.org/index.php/api/catalog/ddi/", idno)
url2 <- paste0("https://microdata.worldbank.org/index.php/api/catalog/rdf/", idno)
url3 <- paste0("https://microdata.worldbank.org/index.php/api/catalog/resources/", idno)
file1 <- paste0(survey_path, "/", idno, ".xml")
file2 <- paste0(survey_path, "/", idno, ".rdf")
file3 <- paste0(survey_path, "/", idno, ".json")
utils::download.file(url = url1, destfile = file1, method = "curl")
utils::download.file(url = url2, destfile = file2, method = "curl")
utils::download.file(url = url3, destfile = file3, method = "curl")
# Extract the dataset access policy
url <- paste0("https://microdata.worldbank.org/index.php/api/catalog/", idno, "?id_format=idno")
httpResponse <- httr::GET(url)
output = jsonlite::fromJSON(content(httpResponse, "text"))
# If remote access in WB Microdata Library, we link to the repository of origin.
if(output$dataset$data_access_type == "remote") {
remote_url = output$dataset$remote_data_url
} else {
# Otherwise, we link to the WB Microdata Library survey page.
remote_url = paste0("https://microdata.worldbank.org/index.php/catalog/study/", idno)
}
# check if should upload files or just link
rdf_file_path <- NULL
if(! identical(upload_files, TRUE)){
rdf_file_path <- file2
}
# Create survey
create_response <- mdl_survey_import_ddi(xml_file = file1,
rdf_file = rdf_file_path,
enum_collection = mdl_enum_collection$WorldBank,
enum_survey_access_policy = mdl_enum_survey_access_policy$`Data available from external repository (link)`,
data_remote_url = remote_url,
published = published,
overwrite = overwrite)
if(!identical(create_response$status, "success")){
##        setwd(oldwd)
stop("Error when trying to create: ", idno)
}
# add documentation pdf
generate_pdf_response <- mdl_survey_generate_pdf(idno)
# if error, create it without variables
if(!identical(generate_pdf_response$status, "success")){
message("Error generating PDF documentation probably due to too large number of variables. Trying to create the PDF without vars...")
generate_pdf_response2 <- mdl_survey_generate_pdf(idno, variable_list = 0, variable_description = 0)
if(identical(generate_pdf_response2$status, "success")){
message("...success generating the PDF without vars")
}else{
message("...failed again generating the PDF")
}
}
# Download the external resources (save in /Doc folder)
res <- jsonlite::fromJSON(file3)
if(upload_files && res$total > 0) {  # If there is at least one resource
for (i in 1:length(res$resources$url)) {
if(res$resources$dctype[i] != "Microdata File [dat/micro]") {
res_download_path <-  file.path(doc_path, basename(res$resources$url[i]))
#print(res_download_path)
if(!file.exists(res_download_path)) {
utils::download.file(res$resources$url[i], res_download_path, method = "curl")
}
}
}
}
# upload if at least a file
if(upload_files && res$total > 0) {
res_df <- res$resources
uploaded_files <- c()
added_resources <- c()
# iterate over files
for(i in 1:nrow(res_df)){
# upload only if not a data file
if(res_df$dctype[i] != "Microdata File [dat/micro]") {
file_path <- file.path(doc_path, basename(res_df$url[i]))
# if not already, create a resource for the file
if(!file_path %in% uploaded_files){
# Check if file exists and its size is greater than 0
if(file.exists(file_path) && file.size(file_path) > 0  && ! tools::file_ext(file_path) %in% no_upload_extensions ){
print(paste("uploading:", basename(res_df$url[i])))
# upload file, and if successful add to list of uploaded files
resource_upload_response <- mdl_resource_upload_file_and_link(
survey_idno = idno,
file_path = file_path,
enum_resource_type = res_df$dctype[i],
title = res_df$title[i],
enum_resource_format = res_df$dcformat[i],
description = res_df$description[i],
author = res_df$author[i],
dcdate = res_df$dctype[i],
country = res_df$country[i],
language = res_df$language[i],
contributor = res_df$contributor[i],
publisher = res_df$publisher[i],
rights = res_df$rights[i],
abstract = res_df$abstract[i],
toc = res_df$toc[i],
overwrite = TRUE
)
if(identical(resource_upload_response$status, "success")){
uploaded_files <- c(uploaded_files, file_path)
}
}
# Only create a resource with a link if did not managed to upload file
if(!file_path %in% uploaded_files){
# create resource
resource_add_response <- mdl_resource_add(
survey_idno = idno,
filename = res_df$url[i],
dctype = res_df$dctype[i],
title = res_df$title[i],
dcformat = res_df$dcformat[i],
description = res_df$description[i],
author = res_df$author[i],
dcdate = res_df$dctype[i],
country = res_df$country[i],
language = res_df$language[i],
contributor = res_df$contributor[i],
publisher = res_df$publisher[i],
rights = res_df$rights[i],
abstract = res_df$abstract[i],
toc = res_df$toc[i],
overwrite = "yes"
)
if(identical(resource_add_response$status, "success")){
uploaded_files <- c(uploaded_files, file_path)
}
}
}
}
}
}
# final message
print(paste(idno, " added to UNHCR Microdata Library"))
# Check if country named as in MDL
for(a_nation in output$dataset$metadata$study_desc$study_info$nation$name){
if(! a_nation %in% mdl_enum_country){
message("Country not found in MDL list, please check and create an alias if necessary: ", a_nation," (", idno,")")
}
}
##    setwd(oldwd)
cat("\n\n")
}
getwd()
zzzH2 <- mdl_harvest_worldbank(
wbg_survey_idno = "JOR_2015_SRHCS_v01_M",
base_path = NULL,
upload_files = T,
overwrite = T,
published = T
)
# Create a resource linked to a previously uploaded file
mdl_resource_add <- function(
survey_idno,
filename,
dctype,
title,
dcformat = NULL,
description = NULL,
author = NULL,
dcdate = NULL,
country = NULL,
language = NULL,
contributor = NULL,
publisher = NULL,
rights = NULL,
abstract = NULL,
toc = NULL,
overwrite = "no"
){
# specify call options
options <- list(
idno = survey_idno,
dctype = dctype,
dcformat = dcformat,
title = title,
author = author,
dcdate = dcdate,
country = country,
language = language,
contributor = contributor,
publisher = publisher,
rights = rights,
description = description,
abstract = abstract,
filename = filename,
toc = toc,
overwrite = overwrite
)
# specify url
url <-  paste(mdl_api_get_url(), "datasets", survey_idno, "resources", sep = "/")
# call API
httpResponse <- httr::POST(url,
httr::add_headers("X-API-KEY" = mdl_api_get_key()),
body = options,
encode = "json"
)
response_content <- httr::content(httpResponse, "text")
output <- jsonlite::fromJSON(response_content)
if(!is.list(output)){
output <- list(output)
}
if(httpResponse$status_code!=200){
warning(response_content)
}
return (output)
}
#' @param country Country name
#' @param language Language or Language code
#' @param contributor Contributor name
#' @param publisher Publisher name
#' @param rights Rights
#' @param abstract Resource abstract
#' @param toc Table of contents
#' @param overwrite Boolean, specifies if the file/resource should be overwritten if already present
#'
#' @export
mdl_resource_upload_file_and_link <- function(survey_idno,
file_path,
enum_resource_type,
title,
description = NULL,
enum_resource_format = NULL,
author = NULL,
dcdate = NULL,
country = NULL,
language = NULL,
contributor = NULL,
publisher = NULL,
rights = NULL,
abstract = NULL,
toc = NULL,
overwrite = FALSE){
if(identical(overwrite, TRUE)  || identical(overwrite, "yes")){
overwrite <- "yes"
}else{
overwrite <- "no"
}
# specify call options
options <- list(
idno = survey_idno,
file = httr::upload_file(file_path),
dctype = enum_resource_type,
title = title,
description = description,
overwrite = overwrite,
dcformat = enum_resource_format,
author = author,
dcdate = dcdate,
country = country,
language = language,
contributor = contributor,
publisher = publisher,
rights = rights,
abstract = abstract,
toc = toc
)
# Rights is set to default as NA when fetching the metadata
if(identical(options$rights, NA)){
options$rights <- NULL
}
# specify url
url <-  paste(mdl_api_get_url(), "datasets", survey_idno, "resources", sep = "/")
# call API
httpResponse <- httr::POST(url,
httr::add_headers("X-API-KEY" = mdl_api_get_key()),
body = options
#encode = "json"
)
response_content <- httr::content(httpResponse, "text")
output <- jsonlite::fromJSON(response_content)
if(!is.list(output)){
output <- list(output)
}
if(httpResponse$status_code!=200){
warning(response_content)
}
return (output)
}
zzzH2 <- mdl_harvest_worldbank(
wbg_survey_idno = "JOR_2015_SRHCS_v01_M",
base_path = NULL,
upload_files = T,
overwrite = T,
published = T
)
#'
#' @param xml_file Path to the DDI XML file.
#' @param rdf_file Path to the RDF file.
#' @param enum_collection The ID of the collection where the survey will be created. To see an up to date list of collections call mdl_collection_list().You can also use the corresponding enumerator, e.g.: mdl_enum_collection$WestAfrica
#' @param enum_survey_access_policy Specifies the access level to the data files. You can use the corresponding enumerator, e.g.: mdl_enum_survey_access_policy$'Licensed use files'
#' @param data_remote_url Link to the data files, in case enum_survey_access_policy is set to remote (link to external repository).
#' @param published The survey status: FALSE for draft, TRUE for published.
#' @param overwrite Specifies if the survey will be overwritten in case it already exists: FALSE for not overwriting, TRUE for overwriting. If a survey with the same idno already exists and the argument is set to FALSE, the survey will not change and an error will be returned.
#'
#' @export
mdl_survey_import_ddi <- function(xml_file, rdf_file = NULL, enum_collection, enum_survey_access_policy, data_remote_url = NULL, published = FALSE, overwrite = FALSE){
if(enum_survey_access_policy == mdl_enum_survey_access_policy$`Data available from external repository (link)` && is.null(data_remote_url)){
stop("enum_survey_access_policy is set to remote, but data_remote_url was not specified.")
}
# define parameters
opt_published <- as.numeric(published)
opt_overwrite <-  "no"
if(identical(overwrite, TRUE) || identical(overwrite, "yes")){
opt_overwrite <- "yes"
}
# define options
options = list(
file = httr::upload_file(xml_file),
overwrite = opt_overwrite,
published = opt_published,
repositoryid = enum_collection,
access_policy = enum_survey_access_policy,
data_remote_url = data_remote_url
)
if (!is.null(rdf_file) && file.exists(rdf_file)){
options$rdf = httr::upload_file(rdf_file)
}
# specify url
url <-  paste(mdl_api_get_url(), "datasets", "import_ddi", sep = "/")
# call API
httpResponse <- httr::POST(url,
httr::add_headers("X-API-KEY" = mdl_api_get_key()),
body = options
#encode = "json"
)
response_content <- httr::content(httpResponse, "text")
output <- jsonlite::fromJSON(response_content)
if(!is.list(output)){
output <- list(output)
}
if(httpResponse$status_code!=200){
warning(response_content)
}
return (output)
}
zzzH2 <- mdl_harvest_worldbank(
wbg_survey_idno = "JOR_2015_SRHCS_v01_M",
base_path = NULL,
upload_files = T,
overwrite = T,
published = T
)
# list of possible formats of resources
#' @export
mdl_enum_resource_format <- list(
Compressed_Generic = "application/x-compressed",
Compressed_ZIP = "application/zip",
Data_CSPro = "application/x-cspro",
Data_dBase = "application/dbase",
Data_Microsoft_Access = "application/msaccess",
Data_SAS = "application/x-sas",
Data_SPSS = "application/x-spss",
Data_Stata = "application/x-stata",
Document_Generic = "text",
Document_HTML = "text/html",
Document_Microsoft_Excel = "application/msexcel",
Document_Microsoft_PowerPoint = "application/mspowerpoint",
Document_Microsoft_Word = "application/msword",
Document_PDF = "application/pdf",
Document_Postscript = "application/postscript",
Document_Plain = "text/plain",
Document_WordPerfect = "text/wordperfect",
Image_GIF = "image/gif",
Image_JPEG = "image/jpeg",
Image_PNG = "image/png",
Image_TIFF = "image/tiff"
)
# repository code for creating dataset
#' @export
mdl_enum_collection <- list(
Europe = "EURO",
Americas = "SA",
Asia = "ASIA",
MENA = "MENA",
WestAfrica = "WA",
EastAfrica = "EHA",
SourthAfrica = "SAO",
WorldBank = "WBG"
)
zzzH2 <- mdl_harvest_worldbank(
wbg_survey_idno = "JOR_2015_SRHCS_v01_M",
base_path = NULL,
upload_files = F,
overwrite = T,
published = T
)
getwd()
zzzH <- mdl_harvest_worldbank(
wbg_survey_idno = "JOR_2016_DR-BL_v01_M",
base_path = NULL,
upload_files = T,
overwrite = T,
published = T
)
zzzH <- mdl_harvest_worldbank(
wbg_survey_idno = "JOR_2016_DR-BL_v01_M",
base_path = NULL,
upload_files = T,
overwrite = T,
published = T
)
zzzH3 <- mdl_harvest_worldbank(
wbg_survey_idno = "ETH_2017_SPS_v01_M",
base_path = NULL,
upload_files = T,
overwrite = T,
published = T
)
getwd()
xxx <- mdl_survey_generate_pdf("ETH_2017_SPS_v01_M")
?mdl_survey_generate_pdf
setwd("C:\\Users\\SANSON\\OneDrive - UNHCR\\Documents\\harvest_WBG")
getwd()
zzzH3 <- mdl_harvest_worldbank(
wbg_survey_idno = "ETH_2017_SPS_v01_M",
base_path = NULL,
upload_files = T,
overwrite = T,
published = T
)
getwd()
zzzH4 <- mdl_harvest_worldbank(
wbg_survey_idno = "BIH_2011_MICS-RS_v01_M",
base_path = NULL,
upload_files = F,
overwrite = T,
published = T
)
zzzH4 <- mdl_harvest_worldbank(
wbg_survey_idno = "BIH_2011_MICS-RS_v01_M",
base_path = NULL,
upload_files = T,
overwrite = T,
published = T
)
getwd()
zzzH <- mdl_harvest_worldbank(
wbg_survey_idno = "JOR_2016_DR-BL_v01_M",
base_path = "C:\\Users\\SANSON\\OneDrive - UNHCR\\Documents\\harvest_WBG",
upload_files = T,
overwrite = T,
published = T
)
getwd()
setwd(C:\\Users\\SANSON\\OneDrive - UNHCR\\Documents\\GitHub\\mdl)
setwd("C:\\Users\\SANSON\\OneDrive - UNHCR\\Documents\\GitHub\\mdl")
devtools::document()
devtools::document()
mdl_enum_survey_topics
sapply(mdl_enum_survey_topics, cat)
sapply(mdl_enum_survey_topics, names)
install.packages("lubridate")
?lubridate::year
lubridate::year("2012-03-26")
getwd()
